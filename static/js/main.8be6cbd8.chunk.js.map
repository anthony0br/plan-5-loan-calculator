{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CalculateYearsForm","props","_useState","useState","_useState2","_slicedToArray","loanAmount","setLoanAmount","_useState3","_useState4","startingSalary","setSalary","_useState5","_useState6","loanClass","setLoanClass","_useState7","_useState8","resultsDisplay","setResultsDisplay","_useState9","_useState10","yearsResult","resultsStyle","display","React","createElement","onSubmit","submitEvent","preventDefault","loanRemaining","Number","isNaN","type","className","value","onChange","event","target","style","App","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"mMAGA,SAASA,EAAmBC,GAC1B,IAAAC,EACoCC,mBAAS,SAAQC,EAAAC,YAAAH,EAAA,GAA9CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAAAI,EACIL,mBAAS,SAAQM,EAAAJ,YAAAG,EAAA,GAA9CE,EAAcD,EAAA,GAAEE,EAASF,EAAA,GAEhCG,EACkCT,mBAAS,IAAGU,EAAAR,YAAAO,EAAA,GAAvCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAAAG,EACcb,mBAAS,QAAOc,EAAAZ,YAAAW,EAAA,GAArDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAAAG,EACFjB,mBAAS,IAAGkB,EAAAhB,YAAAe,EAAA,GAA3CE,EAAWD,EAAA,GAAgBA,EAAA,GAqBlC,IAAME,EAAe,CACnBC,QAASN,GAGX,OACEO,IAAAC,cAAA,QAAMC,SAvBR,SAAsBC,GACpBA,EAAYC,iBAGZ,IAAIC,EAAgBC,OAAOzB,GACR,KAAfA,GAAqByB,OAAOC,MAAMF,IAAkBA,EAAgB,EACtEf,EAAa,YAKfA,EAAa,IAIbI,EAAkB,YAShBM,IAAAC,cAAA,UAAI,8BACJD,IAAAC,cAAA,SAAG,sJAEHD,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAG,oFACHD,IAAAC,cAAA,SAAOO,KAAK,SAASC,UAAWpB,EAAWqB,MAAO7B,EAAY8B,SAAU,SAAAC,GAAU9B,EAAc8B,EAAMC,OAAOH,UAE7GV,IAAAC,cAAA,UAAI,oBACJD,IAAAC,cAAA,SAAG,8HACHD,IAAAC,cAAA,SAAG,mBACHD,IAAAC,cAAA,SAAOO,KAAK,SAASE,MAAOzB,EAAgB0B,SAAU,SAAAC,GAAU1B,EAAU0B,EAAMC,OAAOH,UACvFV,IAAAC,cAAA,SAAG,qBACHD,IAAAC,cAAA,SAAOO,KAAK,SAASE,MAAOzB,EAAgB0B,SAAU,SAAAC,GAAU1B,EAAU0B,EAAMC,OAAOH,UACvFV,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAQO,KAAK,UAAS,aACtBR,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAAA,OAAKQ,UAAU,UAAUK,MAAOhB,GAC9BE,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAG,wBAAsBJ,EAAY,8FAgC9BkB,MA1Bf,WACE,OACEf,IAAAC,cAAA,OAAKQ,UAAU,OACbT,IAAAC,cAAA,UAAQQ,UAAU,cAChBT,IAAAC,cAAA,SAAG,4BAILD,IAAAC,cAAA,QAAMQ,UAAU,YACdT,IAAAC,cAAC1B,EAAkB,OAErByB,IAAAC,cAAA,UAAQQ,UAAU,cAChBT,IAAAC,cAAA,SAAG,4CAEDD,IAAAC,cAAA,WAAS,yJAGTD,IAAAC,cAAA,WAAS,uDAGXD,IAAAC,cAAA,KAAGe,KAAK,wDAAuD,6BCxExDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlC,IAAAC,cAACD,IAAMmC,WAAU,KACfnC,IAAAC,cAACc,EAAG,QAORE","file":"static/js/main.8be6cbd8.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState }  from 'react';\n\nfunction CalculateYearsForm(props) {\n  // Input hooks\n  const [loanAmount, setLoanAmount] = useState(\"42000\");\n  const [startingSalary, setSalary] = useState(\"25000\");\n\n  // Output hooks\n  const [loanClass, setLoanClass] = useState(\"\");\n  const [resultsDisplay, setResultsDisplay] = useState(\"none\");\n  const [yearsResult, setYearsResult] = useState(\"\");\n\n  // Calculate number of years, set states of results component to display results\n  function handleSubmit(submitEvent) {\n    submitEvent.preventDefault();\n\n    // Check for empty or invalid amounts\n    let loanRemaining = Number(loanAmount)\n    if (loanAmount === \"\" || Number.isNaN(loanRemaining) || loanRemaining < 0) {\n      setLoanClass(\"invalid\");\n      return;\n    }\n\n    // Set textboxes to valid\n    setLoanClass(\"\");\n\n\n    // Display results\n    setResultsDisplay(\"block\");\n  }\n\n  const resultsStyle = {\n    display: resultsDisplay,\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Number of Years Calculator</h1>\n      <p>Currently, this app only calculates the number of years it will take to repay a loan. Calculators for other missing variables will be added later.</p>\n      \n      <h3>Total loan to pay</h3>\n      <p>The total outstanding amount you need to pay, including maintenance and tuition.</p>\n      <input type=\"number\" className={loanClass} value={loanAmount} onChange={event => {setLoanAmount(event.target.value)}} />\n\n      <h3>Salary modelling</h3>\n      <p>This is a simple model of your projected salary. Each year the salary increases by salaryIncrease + salary * salaryGrowth.</p>\n      <p>Salary growth: </p>\n      <input type=\"number\" value={startingSalary} onChange={event => {setSalary(event.target.value)}} />\n      <p>Salary increase: </p>\n      <input type=\"number\" value={startingSalary} onChange={event => {setSalary(event.target.value)}} />\n      <br></br>\n      <br></br>\n      <button type=\"submit\">Calculate</button>\n      <br></br>\n      <br></br>\n      <div className=\"results\" style={resultsStyle}>\n        <h1>Results</h1>\n        <p>It will take roughly {yearsResult} to pay off your plan 5 student loan. Note that after 40 years, your debt will be wiped.</p>\n      </div>\n    </form>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Student Loan Calculator\n        </p>\n      </header>\n      <body className=\"App-body\">\n        <CalculateYearsForm></CalculateYearsForm>\n      </body>\n      <footer className=\"App-footer\">\n        <p>\n          Created by Anthony O'Brien with React.js.\n          <br></br>\n          Designed to estimate repayment information for plan 5 student loans.\n          Assumptions such as rate of RPI, CPI and future government policy have been made.\n          <br></br>\n          Licensed under GNU GPL-3.0. Last update April 2023.\n        </p>\n        <a href=\"https://github.com/anthony0br/plan-5-loan-calculator\">View Github repository</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}